# 01. 왜 헥사고날 아키텍처인가?

- [01. 왜 헥사고날 아키텍처인가?](#01-왜-헥사고날-아키텍처인가)
  - [도메인 헥사곤](#도메인-헥사곤)
  - [애플리케이션 헥사곤](#애플리케이션-헥사곤)
    - [유스케이스](#유스케이스)
    - [입력 포트](#입력-포트)
    - [출력 포트](#출력-포트)
  - [프레임워크 헥사곤](#프레임워크-헥사곤)
    - [드라이빙 오퍼레이션](#드라이빙-오퍼레이션)
    - [드리븐 오퍼레이션](#드리븐-오퍼레이션)
  - [Self Question](#self-question)


헥사곤이라는 일종의 layer가 존재하고 이 레이어 사이에는 인터페이스를 통해 연결되고
애플리케이션 헥사곤에서는 포트, 가장 외부에 존재하는 프레임워크 헥사곤에서 어댑터의 개념으로 다른 레이어(외부 시스템 등)과 연결된다

## 도메인 헥사곤

- 실 세계 문제를 이해하고 모델링하는 활동을 의미
  - 비즈니스 규칙을 엔티티와 값 객체로 캡슐화
- DDD에서 나오는 엔티티, 값 객체 활용(값 객체는 표현력을 올려줌)
- 도메인 보호!!

## 애플리케이션 헥사곤

- 애플리케이션 특화 작업을 추상적으로 처리하는 곳
- 도메인 비즈니스 규칙에 기반한 소프트웨어 사용자의 의도와 기능을 표현
- 유스케이스(Use Case), 입력 포트(Input Port), 출력 포트(Output Port)를 기반으로 구성됨

### 유스케이스

- 도메인 제약사항을 지원하기 위해 시스템의 동작을 소프트웨어 영역 내에 존재하는 애플리케이션 특화 오퍼레이션을 통해 나타냄
- = 즉 소프트웨어가 하는 일을 설명하는 인터페이스
- 다음은 필터링도니 라우터를 조회하는 오퍼레이션을 제공하는 유스케이스!

```java
public interface RouterViewUseCase {
  List<Router> getRouters(Predicate<Router> filter);
}
```

### 입력 포트

- 유스케이스 인터페이스가 존재하므로 이에 대한 구현체를 만들어야하는데, 이것이 바로 입력포트!

```java
public class RouteViewInputPort implements RouterViewUseCase {
 // ...
}
```

### 출력 포트

- 유스케이스가 목표를 달성하기 위해 외부 리소스에서 데이터를 가져올 때 **출력 포트**를 거치도록 함
- 이는 인터페이스로 표현됨 → 유스케이스 입장에서는 해당 데이터가 어디서 가져오는 것인지 신경쓰지 않기 때문
- 데이터를 어디서 가져오는 지에 대한 책임은 **출력 포트**에게 할당

```java
public interface RouterViewOutputPort {
 List<Router> fetchRouters();
}
```

## 프레임워크 헥사곤

- 소프트웨어와 통신할 수 있는 기술을 결정
- 통신은 두 가지 형태로 발생 가능
  - 드라이빙 방식(드라이빙 오퍼레이션=driving operation)
  - 드리븐 방식(드리븐 오퍼레이션=driven operation)
- 드라이버 관점의 경우는 입력 어댑터, 드리븐 관점의 경우 출력 어댑터를 사용

### 드라이빙 오퍼레이션

- 소프트웨어에 동작을 요청하는 명령을 의미
- 드라이빙이라는 용어는 외부 엔티티들이 시스템의 특정 동작을 유도(driving)하는 것에서 유래
- e.g. 클라이언트가 서버에 요청하는 것
- 어떤 클라이언트에서 오늘 드라이빙 오퍼레이션을 제공할 것인지 **입력 어댑터**를 ****정의!

### 드리븐 오퍼레이션

- 드라이빙 오퍼레이션과 반대로 외부에서가 아닌 애플리케이션에서 트리거 되고 소프트웨어 요구사항을 충족하기 위해 외부에서 필요한 데이터를 가져옴
- 즉 드리븐 오퍼레이터는 RDBMS, json file 등 외부의 시스템이 됨
- 드리븐(driven)이라는 용어가 붙여진 이유는 헥사고날 애플리케이션 자체에 의해 이러한 오퍼레이션이 유도되고 통제되며, 다른 외부 시스템에서 동작을 트리거하기 때문

## Self Question

- 헥사고날 아키텍처를 구성하는 세가지 헥사곤은 무엇인가?
  - 도메인 헥사곤, 애플리케이션 헥사곤, 프레임워크 헥사곤
- 도메인 헥사곤의 역할은 무엇인가?
  - 실제 우리가 풀고자하는 도메인을 엔티티로 정의하여 응집하고 보호
- 유스케이스는 언제 활용해야 하는가?
  - 시스템의 동작을 정의할 때. 이 시스템이 어떤 동작들을 수행할 수 있는지 기술하는 용도
- 입력 및 출력 어댑터는 어떤 헥사곤에 존재하는가?
  - 프레임워크 헥사곤에 존재하며, 외부 시스템과 연결됨
- 드라이빙 오퍼레이션과 드리븐 오퍼레이션의 차이점은 무엇인가?
  - 오퍼레이션의 발생지가 다름. 각각 드라이빙 오퍼레이션은 외부 시스템, 드리븐 오퍼레이션은 내부 애플리케이션에서 오퍼레이션이 발생
